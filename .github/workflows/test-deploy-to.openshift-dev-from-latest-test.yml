name: Deploy to DEV from latest test build
env:
  OPENSHIFT_SERVER: '${{ secrets.OPENSHIFT_SERVER }}'
  OPENSHIFT_TOKEN: '${{ secrets.OPENSHIFT_TOKEN }}'

  OPENSHIFT_NAMESPACE_DEV: '${{ secrets.ECAS_NAMESPACE_NO_ENV }}-dev'
  REDHAT_REGISTRY_USERNAME: '${{ secrets.REDHAT_REGISTRY_USERNAME }}'
  REDHAT_REGISTRY_PASSWORD: '${{ secrets.REDHAT_REGISTRY_PASSWORD }}'
  CA_CERT: '${{ secrets.CA_CERT }}'
  CERTIFICATE: '${{ secrets.CERT }}'
  PRIVATE_KEY: '${{ secrets.PRIV_KEY }}'
  SOURCE_REPOSITORY: 'https://github.com/bcgov/EDUC-HUB.git'
  DOTNET_STARTUP_PROJECT: 'CASInterfaceService/cas-interface-service.csproj'
  IMAGE_REGISTRY: 'ghcr.io/${{ github.repository_owner }}'
  IMAGE_REGISTRY_USER: '${{ github.actor }}'
  IMAGE_REGISTRY_PASSWORD: '${{ github.token }}'
  IMAGE_NAME_FRONTEND: ecas-frontend
  IMAGE_NAME_API: ecas-api
  IMAGE_NAME_CAS: cas-api
  REDHAT_REGISTRY: https://registry.redhat.io
  DOCKER_ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca/docker-remote
  ARTIFACTORY_REPO: artifacts.developer.gov.bc.ca
  APP_NAME: ecas
  REPO_NAME: educ-ecas
  BRANCH: test_github_actions
  APP_NAME_FRONTEND: ecas-frontend
  APP_NAME_API: ecas-api
  APP_NAME_CAS: cas-api
  NAMESPACE: '${{ secrets.ECAS_NAMESPACE_NO_ENV }}'
  TAG_TEST: test
  TAG_DEV: dev
  MIN_REPLICAS_DEV: '1'
  MAX_REPLICAS_DEV: '2'
  MIN_CPU: 300m
  MAX_CPU: 600m
  MIN_MEM: 250Mi
  MAX_MEM: 500Mi
  MIN_REPLICAS_TEST: '2'
  MAX_REPLICAS_TEST: '3'
  HOST_ROUTE: '${{ secrets.SITE_URL }}'
  
on:
  workflow_dispatch:

jobs:
  openshift-ci-cd:
    name: Build and deploy to dev
    # ubuntu-latest can also be used.
    runs-on: ubuntu-22.04
    environment: dev

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v3

    - name: Get latest tag
      uses: actions-ecosystem/action-get-latest-tag@v1
      id: get-latest-tag

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

      # https://github.com/redhat-actions/oc-login#readme
    - uses: actions/checkout@v3
    - name: Deploy
    
      run: >
          set -eux

          # Login to OpenShift and select project
          
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{
          env.OPENSHIFT_SERVER }}
          
          oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{
          env.OPENSHIFT_SERVER }}

          oc project ${{ env.OPENSHIFT_NAMESPACE_DEV }}

          # Cancel any rollouts in progress

          oc rollout cancel dc/${{ env.IMAGE_NAME_FRONTEND }} 2> /dev/null || true && echo "No rollout in progress"

          oc rollout cancel dc/${{ env.IMAGE_NAME_API }} 2> /dev/null || true && echo "No ecas api rollout in progress"

          oc rollout cancel dc/${{ env.IMAGE_NAME_CAS }} 2> /dev/null  || true && echo "No cas api rollout in progress"

          # Create the image stream if it doesn't exist

          oc create imagestream ${{ env.REPO_NAME }}-frontend> /dev/null || true && echo "Frontend image stream in place"

          oc create imagestream ${{ env.REPO_NAME }}-api> /dev/null || true && echo "Ecas API image stream in place"
          
          
          oc create imagestream ${{ env.REPO_NAME }}-cas-api> /dev/null || true && echo "CAS API  image stream in place"
          

       
          oc tag ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-frontend:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-frontend:${{ env.TAG_DEV }}

          echo "Frontend tag success"

       
          oc tag ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-api:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-api:${{ env.TAG_DEV }}


          echo "Ecas API tag success"

          oc tag ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-cas-api:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-cas-api:${{ env.TAG_DEV }}


          echo "CAS API tag success"

          # Start rollout (if necessary) and follow it


          oc rollout latest dc/${{ env.APP_NAME_FRONTEND }} 2> /dev/null \

          || true && echo "Rollout Front End in progress"

          oc rollout latest dc/${{ env.APP_NAME_API }} 2> /dev/null \

          || true && echo "Rollout ECAS API  in progress"

          oc rollout latest dc/${{ env.APP_NAME_CAS }} 2> /dev/null \

          || true && echo "Rollout CAS API in progress"

          oc logs  dc/${{ env.IMAGE_NAME_FRONTEND }}
          
          oc logs  dc/${{ env.IMAGE_NAME_API }} 
          
          oc logs  dc/${{ env.IMAGE_NAME_CAS }} 

          # Get status, returns 0 if rollout is successful

          oc rollout status dc/${{ env.IMAGE_NAME_FRONTEND }}

          oc rollout status dc/${{ env.IMAGE_NAME_API }}

          oc rollout status dc/${{ env.IMAGE_NAME_CAS }}
       
        
      

    - name: ZAP Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'https://${{ env.HOST_ROUTE }}'
